name: Slack - Notification Test

on:
  repository_dispatch:
    types: [run-notification-test]
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        required: true
        default: 'dev'
      branch:
        description: 'Branch to test'
        required: true
        default: 'dev'

permissions:
  contents: read

jobs:
  run-notification-test:
    name: Run Notification Spec File
    runs-on: ubuntu-latest
    env:
      CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.branch || github.event.inputs.branch }}

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install reporters (CI only)
        run: npm install --no-save mocha mocha-multi-reporters mochawesome mochawesome-merge

      - name: Set environment
        run: |
          if [[ "${{ github.event.client_payload.env || github.event.inputs.env }}" == "prod" ]]; then
            echo "CYPRESS_API_BASE_URL=https://api.click2deploy.com/api/v1" >> $GITHUB_ENV
            echo "CYPRESS_PROJECT_URL=https://click2deploy.com/project" >> $GITHUB_ENV
            echo "CYPRESS_HOME_URL=https://click2deploy.com/" >> $GITHUB_ENV
          else
            echo "CYPRESS_API_BASE_URL=https://dev-backend.click2deploy.com/api/v1" >> $GITHUB_ENV
            echo "CYPRESS_PROJECT_URL=https://dev.click2deploy.com/project" >> $GITHUB_ENV
            echo "CYPRESS_HOME_URL=https://dev.click2deploy.com/" >> $GITHUB_ENV
          fi

      - name: Run Cypress Notification Test
        run: |
          npx cypress run \
            --spec "cypress/e2e/C2D/EnhanceApproach/51_Notification_test.cy.js" \
            --reporter mochawesome \
            --reporter-options reportDir=results,overwrite=false,html=false,json=true

      - name: Upload results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results
          path: results/mochawesome*.json

      - name: Parse and send Slack notification
        if: always()
        run: |
          if [ -f results/mochawesome*.json ]; then
            total=$(jq '.stats.tests' results/mochawesome*.json)
            passes=$(jq '.stats.passes' results/mochawesome*.json)
            failures=$(jq '.stats.failures' results/mochawesome*.json)

            failed_tests=$(jq -r '.results[].suites[].tests[] | select(.fail==true) | .title' results/mochawesome*.json | xargs -0)

            payload=$(jq -n \
              --arg total "$total" \
              --arg passes "$passes" \
              --arg failures "$failures" \
              --arg failed_tests "$failed_tests" \
              --arg branch "${{ github.event.client_payload.branch || github.event.inputs.branch }}" \
              --arg actor "${{ github.actor }}" \
              '{
                text: "üöÄ *Slack Notification Test Results* \n*Branch:* \($branch)\n*By:* \($actor)\n*Tests:* \($total) | ‚úÖ \($passes) | ‚ùå \($failures)\nFailed: \($failed_tests)"
              }')

            curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"‚ö†Ô∏è No mochawesome results.json found for Slack Notification Test."}' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
